客户端访问服务器的时候，服务器会检查其是否携带 cookie 对象





客户端首次访问服务器的时候，服务器会创建一个 session 对象用于记录此次会话，session 对象存储在服务器中，不会响应给客户端
session 对象中有一个 sessionId，服务器可以根据 sessionId 获取这个 session 对象
服务器会创建一个（也可多个） cookie 对象响应给客户端，此 cookie 对象中存储的是 sessionId
cookie：JSESSIONID="573B5A7439B207E7115DB105BB8FE614"


如果响应是两个 cookie 对象，响应头 response 对象中有两个 key:value
Set-Cookie: keya=valuea
Set-Cookie: keyb=valueb

客户端在收到响应后，会把 cookie 对象中的键值对存储起来
在再次向服务其发送请求的时候，请求头中会携带 cookie[] 对象数组（请求中如果没有携带 cookie 对象，那么 req.getCookies() 得到的是 null）
Cookie: keya=valuea; keyb=valueb

服务器根据请求头中的 cookie 对象中拿到 sessionID，由 sessionId 拿到 session 对象，session 对象中存储了用户的相关数据









（浏览器中存储的 cookie 对象存储是有一定的时效性的，如果将浏览器关掉，再次请求就没有 cookie 了）
（cookie 分为会话型 cookie 和持久性 cookie，默认是会话型 cookie）
（默认 cookie 的有效期是一次会话期之内，就是只要浏览器不关闭 cookie 就还在，cookie 对象是保存在内存中的）
（持久化 cookie 是服务器明确的设置了 cookie 的存在时间，就算浏览器关了，也会将这个 cookie 保存在硬盘上）

// 1.创建 cookie 对象
Cookie cookie1 = new Cookie("keya", "valuea");
// 将 cookie1 设置成为持久化 cookie
cookie1.setMaxAge(60*3);//该 cookie 保存时间是 180s
Cookie cookie2 = new Cookie("keyb", "valueb");

此时客户端向服务器发送第一次请求后，服务器返回的响应 response 对象的响应头中
Set-Cookie: keya=valuea; Max-Age=180; Expires=Sun, 24 Nov 2024 08:56:33 GMT
Set-Cookie: keyb=valueb
此时 cookie1 持久型会存储在硬盘上180s，cookie2 为会话型（一次会话就是 session 对象不变）
当客户端再次访问时候，会在请求头中携带 cookie 对象
Cookie: keya=valuea; keyb=valueb







cookie 的提交路径
正常来说 cookie 会往当前项目的任意一个资源路径访问时提交
如果想要设置 cookie 的提交路径（如只在访问 servletb 的时候提交 cookie）：cookie1.setPath("/servletb");

此时客户端向服务器发送第一次请求后，服务器返回的响应 response 对象的响应头中
Set-Cookie: keya=valuea; Max-Age=180; Expires=Sun, 24 Nov 2024 09:05:34 GMT; Path=/servletb
Set-Cookie: keyb=valueb
当客户端再次访问（servletb）的时候，会在请求头中携带 cookie 对象
Cookie: keya=valuea; keyb=valueb
当客户端再次访问（servletc）的时候，会在请求头中携带 cookie 对象（但是不含keya=valuea）
Cookie: keyb=valueb




（虽然每个Cookie对象本身只能存储一个键值对，但可以通过创建多个Cookie对象来存储多个键值对）
（例如，可以创建多个Cookie对象，每个对象存储一个键值对，然后将这些Cookie添加到响应中，这样浏览器就会保存这些键值对‌）


